/**
 * API documentation
 * To use this api you need an access token. To get the token, send a post request with your email address to api-users resource and one
 * will be send to your. See below for information on how to use this api and if you have any questions you can contact us at
 * helpdesk@laji.fi.  Place refer to [schema.laji.fi](http://schema.laji.fi/) for more information about the used vocabulary
 *
 * OpenAPI spec version: 0.1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import * as models from './models';

export interface Identifications {
    /**
     * Unique ID for the object. This will be automatically generated.
     */
    id?: string;

    /**
     * Write associated taxa names here, separated by a semicolon (;). E.g.: \\\"Betula pendula; Betula pubescens; Poaceae\\\".
     */
    associatedObservationTaxa?: string;

    author?: string;

    /**
     * Name of the identifier (person)
     */
    det?: string;

    detDate?: string;

    detVerbatim?: string;

    genusQualifier?: string;

    identificationDate?: string;

    identificationNotes?: string;

    infraAuthor?: string;

    infraEpithet?: string;

    infraRank?: Identifications.InfraRankEnum;

    infrasubspecificSubdivision?: string;

    /**
     * This can be used to select one of the identifications as 'recommended', which is the used as default when displaying information
     * about the specimen.
     */
    preferredIdentification?: string;

    /**
     * PUBLIC: all data can be published; PROTECTED: exact locality is hidden; PRIVATE: most of the data is hidden. If blank means same
     * as public
     */
    publicityRestrictions?: Identifications.PublicityRestrictionsEnum;

    /**
     * Publication reference for the taxon concept, that was used in identification
     */
    sec?: string;

    sortOrder?: number;

    speciesQualifier?: string;

    taxon?: string;

    taxonID?: string;

    taxonRank?: Identifications.TaxonRankEnum;

    /**
     * Taxon name in original format (e.g. from the label), errors and all
     */
    taxonVerbatim?: string;

    detMethod?: Identifications.DetMethodEnum;

    identificationBasis?: Identifications.IdentificationBasisEnum;

}
export namespace Identifications {
    export enum InfraRankEnum {
        InfraRankSsp = <any> 'MY.infraRankSsp',
        InfraRankVar = <any> 'MY.infraRankVar',
        InfraRankBeta = <any> 'MY.infraRankBeta',
        InfraRankB = <any> 'MY.infraRankB',
        InfraRankForma = <any> 'MY.infraRankForma',
        InfraRankHybrid = <any> 'MY.infraRankHybrid',
        InfraRankAnamorph = <any> 'MY.infraRankAnamorph',
        InfraRankAggregate = <any> 'MY.infraRankAggregate',
        InfraRankAberration = <any> 'MY.infraRankAberration',
        InfraRankCultivar = <any> 'MY.infraRankCultivar',
        InfraRankMorpha = <any> 'MY.infraRankMorpha'
    }
    export enum PublicityRestrictionsEnum {
        PublicityRestrictionsPublic = <any> 'MZ.publicityRestrictionsPublic',
        PublicityRestrictionsProtected = <any> 'MZ.publicityRestrictionsProtected',
        PublicityRestrictionsPrivate = <any> 'MZ.publicityRestrictionsPrivate'
    }
    export enum TaxonRankEnum {
        Superdomain = <any> 'MX.superdomain',
        Domain = <any> 'MX.domain',
        Kingdom = <any> 'MX.kingdom',
        Subkingdom = <any> 'MX.subkingdom',
        Superphylum = <any> 'MX.superphylum',
        Superdivision = <any> 'MX.superdivision',
        Phylum = <any> 'MX.phylum',
        Division = <any> 'MX.division',
        Subphylum = <any> 'MX.subphylum',
        Subdivision = <any> 'MX.subdivision',
        Superclass = <any> 'MX.superclass',
        Class = <any> 'MX.class',
        Subclass = <any> 'MX.subclass',
        Infraclass = <any> 'MX.infraclass',
        Parvclass = <any> 'MX.parvclass',
        Superorder = <any> 'MX.superorder',
        Order = <any> 'MX.order',
        Suborder = <any> 'MX.suborder',
        Infraorder = <any> 'MX.infraorder',
        Parvorder = <any> 'MX.parvorder',
        Superfamily = <any> 'MX.superfamily',
        Family = <any> 'MX.family',
        Subfamily = <any> 'MX.subfamily',
        Tribe = <any> 'MX.tribe',
        Subtribe = <any> 'MX.subtribe',
        Supergenus = <any> 'MX.supergenus',
        Genus = <any> 'MX.genus',
        Subgenus = <any> 'MX.subgenus',
        Section = <any> 'MX.section',
        Subsection = <any> 'MX.subsection',
        Series = <any> 'MX.series',
        Subseries = <any> 'MX.subseries',
        InfragenericTaxon = <any> 'MX.infragenericTaxon',
        SpeciesAggregate = <any> 'MX.speciesAggregate',
        Species = <any> 'MX.species',
        InfraspecificTaxon = <any> 'MX.infraspecificTaxon',
        SubspecificAggregate = <any> 'MX.subspecificAggregate',
        Subspecies = <any> 'MX.subspecies',
        Variety = <any> 'MX.variety',
        Subvariety = <any> 'MX.subvariety',
        Form = <any> 'MX.form',
        Subform = <any> 'MX.subform',
        Hybrid = <any> 'MX.hybrid',
        Anamorph = <any> 'MX.anamorph',
        Aggregate = <any> 'MX.aggregate'
    }
    export enum DetMethodEnum {
        DetMethodFreshSample = <any> 'MY.detMethodFreshSample',
        DetMethodMicroscopy = <any> 'MY.detMethodMicroscopy',
        DetMethodPhoto = <any> 'MY.detMethodPhoto'
    }
    export enum IdentificationBasisEnum {
        IdentificationBasisSeen = <any> 'MY.identificationBasisSeen',
        IdentificationBasisHeard = <any> 'MY.identificationBasisHeard',
        IdentificationBasisHandled = <any> 'MY.identificationBasisHandled',
        IdentificationBasisMedia = <any> 'MY.identificationBasisMedia',
        IdentificationBasisFreshSpecimen = <any> 'MY.identificationBasisFreshSpecimen',
        IdentificationBasisPreservedSpecimen = <any> 'MY.identificationBasisPreservedSpecimen',
        IdentificationBasisMicroscope = <any> 'MY.identificationBasisMicroscope',
        IdentificationBasisSpores = <any> 'MY.identificationBasisSpores',
        IdentificationBasisChemical = <any> 'MY.identificationBasisChemical',
        IdentificationBasisGenitals = <any> 'MY.identificationBasisGenitals',
        IdentificationBasisGenitalPreparate = <any> 'MY.identificationBasisGenitalPreparate'
    }
}
