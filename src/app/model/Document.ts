/**
 * API documentation
 * To use this api you need an access token. To get the token, send a post request with your email address to api-users resource and one will be send to your. See below for information on how to use this api and if you have any questions you can contact us at helpdesk@laji.fi.  Place refer to [schema.laji.fi](http://schema.laji.fi/) for more information about the used vocabulary
 *
 * OpenAPI spec version: 0.1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import * as models from './models';

export interface Document {
    /**
     * Unique ID for the object. This will be automatically generated.
     */
    id?: string;

    /**
     * Leave empty if no sample taken, or if the sample was recorded separately
     */
    dNASampleLocation?: string;

    /**
     * URL where more information is available about the specimen
     */
    uRL?: string;

    /**
     * From who/where the specimen was acquired (if not recorded as a transaction)
     */
    acquiredFrom?: string;

    /**
     * Date or year on which the specimen was acquired to the collection. Empty means and old specimen acquired on an unknown date.
     */
    acquisitionDate?: string;

    /**
     * Other identifiers this specimen has, in format 'type:identifier'. For example: 'mzhtypes:123' (old MAZ-type number)
     */
    additionalIDs?: Array<string>;

    /**
     * You can include additonal comment by separating them with colon, e.g. \\\"AY123456:comments here\\\"
     */
    bold?: Array<string>;

    /**
     * Clad book id number or such
     */
    cladBookID?: string;

    /**
     * Clad specimen id: usually color description and a number
     */
    cladSpecimenID?: string;

    /**
     * Verbatim specimen data from clad book
     */
    cladVerbatim?: string;

    /**
     * The collection which this specimen belongs to. QName for MY.collection
     */
    collectionID?: string;

    /**
     * Notes on the defects of the specimen (missing parts or such). Empty value means same as \\\"good\\\" or \\\"hyv√§\\\" - that the specimen is in fine condition.
     */
    condition?: string;

    /**
     * QName for MA.person
     */
    creator?: string;

    /**
     * Where the data about this specimen is from, in addition to labels.
     */
    dataSource?: string;

    /**
     * The dataset(s) this specimen belongs to. QName for GX.dataset
     */
    datasetID?: string;

    datatype?: string;

    /**
     * dateTime string using ISO8601 format
     */
    dateCreated?: Date;

    /**
     * dateTime string using ISO8601 format
     */
    dateEdited?: Date;

    deviceID?: string;

    /**
     * Location of the specimen so that museum personnel can find it. E.g. taxon under which it is stored (if not clear from the identification), or shelf number
     */
    documentLocation?: string;

    /**
     * Description where duplicates (specimens of the same individual) have been sent to and by which ID's
     */
    duplicatesIn?: string;

    /**
     * Reason for this edit or notes about it.
     */
    editNotes?: string;

    /**
     * Name of the person(s) (and possibly the organization) who first transcribed the data
     */
    editor?: string;

    /**
     * QName for MA.person
     */
    editors?: string;

    /**
     * Date the data was first transcribed into electronic format or paper registry
     */
    entered?: string;

    /**
     * Diary-style information about what has been  done to the specimen
     */
    event?: Array<string>;

    /**
     * Name of the exiccatum this specimen belongs to
     */
    exsiccatum?: string;

    /**
     * Array of gatherings
     */
    gatherings: Array<models.Gatherings>;

    /**
     * You can include additonal comment by separating them with colon, e.g. \\\"AY123456:comments here\\\"
     */
    genbank?: Array<string>;

    /**
     * Filled in by ICT team
     */
    inMustikka?: boolean;

    /**
     * Text from labels word-for-word, including spelling errors. Separate each label on its own row, starting from topmost label.
     */
    labelsVerbatim?: string;

    /**
     * Language the specimen data is (mainly) written in, if applicable.
     */
    language?: string;

    /**
     * Collector's identifier (field identifier, keruunumero) for the specimen
     */
    legID?: string;

    /**
     * Free-text notes
     */
    notes?: string;

    /**
     * Original catalogue number or other  original identifier of the specimen. E.g. H9000000
     */
    originalSpecimenID?: string;

    /**
     * Team that owns the record and can edit it.. QName for MOS.organization
     */
    owner?: string;

    /**
     * Main method of preservation
     */
    preservation?: Document.PreservationEnum;

    primaryDataLocation?: string;

    publication?: Array<string>;

    /**
     * PUBLIC: all data can be published; PROTECTED: exact locality is hidden; PRIVATE: most of the data is hidden. If blank means same as public
     */
    publicityRestrictions?: Document.PublicityRestrictionsEnum;

    /**
     * Relationship to another taxon OR specimen. Prefix with relationship type, e.g. \\\"parasite: Parasiticus specius\\\" OR \\\"host:http://tun.fi/JAA.123\\\"
     */
    relationship?: Array<string>;

    scheduledForDeletion?: boolean;

    /**
     * ID of the specimen from which this has been separated from
     */
    separatedFrom?: string;

    separatedTo?: Array<string>;

    serialNumber?: string;

    /**
     * Empty value means same as \\\"ok\\\" - that there is not anything special about the status of the specimen.
     */
    status?: Document.StatusEnum;

    /**
     * List of those fields that contain unreliable data. The list is created automatically.
     */
    unreliableFields?: string;

    /**
     * Information about the quality of the specimen
     */
    verificationStatus?: Document.VerificationStatusEnum;

    /**
     * QName for MOS.organization
     */
    acquiredFromOrganization?: string;

    /**
     * Id of the form that was used for the document
     */
    formID?: string;

    /**
     * QName for MY.gathering
     */
    gathering?: string;

    /**
     * instance of gatheringEvent
     */
    gatheringEvent?: models.GatheringEvent;

    /**
     * QName for MY.gathering
     */
    hasGathering?: string;

    /**
     * QName for MM.image
     */
    images?: string;

    /**
     * The history of the sample
     */
    sampleHistory?: string;

    secureLevel?: Document.SecureLevelEnum;

    temp?: boolean;

    /**
     * Common name of agreement concerning the transfer, if any.
     */
    transferAgreement?: string;

}
export namespace Document {
    export enum PreservationEnum {
        PreservationPinned = <any> 'MY.preservationPinned',
        PreservationGlued = <any> 'MY.preservationGlued',
        PreservationEthanol = <any> 'MY.preservationEthanol',
        PreservationEthanolPure = <any> 'MY.preservationEthanolPure',
        PreservationEthanol96 = <any> 'MY.preservationEthanol96',
        PreservationEthanol80 = <any> 'MY.preservationEthanol80',
        PreservationEthanol80Pure = <any> 'MY.preservationEthanol80Pure',
        PreservationEthanol70 = <any> 'MY.preservationEthanol70',
        PreservationEthanolDenatured = <any> 'MY.preservationEthanolDenatured',
        PreservationFormalin = <any> 'MY.preservationFormalin',
        PreservationEthanolFormalin = <any> 'MY.preservationEthanolFormalin',
        PreservationGlycerol = <any> 'MY.preservationGlycerol',
        PreservationLiquid = <any> 'MY.preservationLiquid',
        PreservationEulan = <any> 'MY.preservationEulan',
        PreservationSlide = <any> 'MY.preservationSlide',
        PreservationSlideEuparal = <any> 'MY.preservationSlideEuparal',
        PreservationSlidePolyviol = <any> 'MY.preservationSlidePolyviol',
        PreservationSlideCanadaBalsam = <any> 'MY.preservationSlideCanadaBalsam',
        PreservationCriticalPointDrying = <any> 'MY.preservationCriticalPointDrying',
        PreservationGoldPlated = <any> 'MY.preservationGoldPlated',
        PreservationFreezeDried = <any> 'MY.preservationFreezeDried',
        PreservationFrozen = <any> 'MY.preservationFrozen',
        PreservationDry = <any> 'MY.preservationDry',
        PreservationStuffed = <any> 'MY.preservationStuffed',
        PreservationParaffin = <any> 'MY.preservationParaffin',
        PreservationPressed = <any> 'MY.preservationPressed',
        PreservationLiving = <any> 'MY.preservationLiving',
        PreservationCast = <any> 'MY.preservationCast',
        PreservationEthanolExFormalin = <any> 'MY.preservationEthanolExFormalin'
    }
    export enum PublicityRestrictionsEnum {
        PublicityRestrictionsPublic = <any> 'MZ.publicityRestrictionsPublic',
        PublicityRestrictionsProtected = <any> 'MZ.publicityRestrictionsProtected',
        PublicityRestrictionsPrivate = <any> 'MZ.publicityRestrictionsPrivate'
    }
    export enum StatusEnum {
        StatusOk = <any> 'MY.statusOk',
        StatusMissing = <any> 'MY.statusMissing',
        StatusUnrecoverable = <any> 'MY.statusUnrecoverable',
        StatusLost = <any> 'MY.statusLost',
        StatusDonated = <any> 'MY.statusDonated',
        StatusDeaccessioned = <any> 'MY.statusDeaccessioned',
        StatusSpent = <any> 'MY.statusSpent',
        StatusDestroyed = <any> 'MY.statusDestroyed',
        StatusUndefined = <any> 'MY.statusUndefined'
    }
    export enum VerificationStatusEnum {
        VerificationStatusOk = <any> 'MY.verificationStatusOk',
        VerificationStatusVerify = <any> 'MY.verificationStatusVerify',
        VerificationStatusComplete = <any> 'MY.verificationStatusComplete',
        VerificationStatusGeoreference = <any> 'MY.verificationStatusGeoreference',
        VerificationStatusDet = <any> 'MY.verificationStatusDet',
        VerificationStatusCheckID = <any> 'MY.verificationStatusCheckID',
        VerificationStatusVerifyCoordinates = <any> 'MY.verificationStatusVerifyCoordinates'
    }
    export enum SecureLevelEnum {
        SecureLevelNone = <any> 'MX.secureLevelNone',
        SecureLevelKM1 = <any> 'MX.secureLevelKM1',
        SecureLevelKM5 = <any> 'MX.secureLevelKM5',
        SecureLevelKM10 = <any> 'MX.secureLevelKM10',
        SecureLevelKM25 = <any> 'MX.secureLevelKM25',
        SecureLevelKM50 = <any> 'MX.secureLevelKM50',
        SecureLevelKM100 = <any> 'MX.secureLevelKM100',
        SecureLevelHighest = <any> 'MX.secureLevelHighest',
        SecureLevelNoShow = <any> 'MX.secureLevelNoShow'
    }
}
