/**
 * API documentation
 * To use this api you need an access token. To get the token, send a post request with your email address to api-users resource and one will be send to your. See below for information on how to use this api and if you have any questions you can contact us at helpdesk@laji.fi.  Place refer to [schema.laji.fi](http://schema.laji.fi/) for more information about the used vocabulary
 *
 * OpenAPI spec version: 0.1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import * as models from './models';

export interface Taxa {
    id: string;

    sortOrder?: number;

    redListStatus2000Finland?: string;

    redListStatus2010Finland?: string;

    redListStatus2015Finland?: string;

    redListStatus2019Finland?: string;

    euringCode?: string;

    etymologyText?: string;

    createdAtTimestamp?: number;

    distributionMapFinland?: string;

    customReportFormLink?: string;

    circumscription?: string;

    externalLinkURL?: string;

    breedingSecureLevel?: string;

    birdlifeCode?: string;

    hasAdminStatus?: Array<string>;

    alsoKnownAs?: Array<Taxa>;

    ingressText?: string;

    invasiveCitizenActionsText?: string;

    invasiveEffectText?: string;

    invasivePreventionMethodsText?: string;

    invasiveSpeciesCategory?: string;

    winteringSecureLevel?: string;

    typeOfOccurrenceInFinlandNotes?: string;

    typeOfOccurrenceInFinland?: Array<string>;

    invasiveSpeciesEstablishment?: string;

    tradeName?: Array<string>;

    taxonomyText?: string;

    reproduction?: string;

    originalPublication?: Array<string>;

    occurrenceInFinlandPublication?: Array<string>;

    /**
     *  If lang parameter is 'multi' this will be a lang object instead of a string or an array of strings!
     */
    obsoleteVernacularName?: Array<string>;

    notes?: string;

    nestSiteSecureLevel?: string;

    naturaAreaSecureLevel?: string;

    nameDecidedDate?: Date;

    nameDecidedBy?: string;

    misappliedNameNotes?: string;

    isPartOfInformalTaxonGroup?: Array<string>;

    euringNumber?: number;

    taxonRank?: string;

    isPartOf?: string;

    scientificName?: string;

    scientificNameAuthorship?: string;

    nameAccordingTo?: string;

    /**
     *  If lang parameter is 'multi' this will be a lang object instead of a string or an array of strings!
     */
    vernacularName?: string;

    misappliedName?: Array<string>;

    occurrenceInFinland?: string;

    checklistStatus?: string;

    higherTaxaStatus?: boolean;

    finnishSpeciesTaggingStatus?: boolean;

    taxonExpert?: Array<string>;

    taxonEditor?: Array<string>;

    secureLevel?: string;

    informalTaxonGroups?: Array<string>;

    occurrences?: Array<any>;

    synonyms?: Array<models.Taxa>;

    children?: Array<models.Taxa>;

    administrativeStatuses?: Array<string>;

    species?: boolean;

    invasiveSpecies?: boolean;

    /**
     * should the name appear cursive
     */
    cursiveName?: boolean;

    countOfSpecies?: number;

    countOfFinnishSpecies?: number;

    /**
     * is taxon species or subspecies or etc and occurs in Finland
     */
    finnishSpecies?: boolean;

    /**
     * taxon occurs in Finland
     */
    finnish?: boolean;

    /**
     * stable in Finland
     */
    stableInFinland?: boolean;

    expertChangesFromParent?: boolean;

    /**
     * sort order for taxonomic sorting
     */
    taxonomicSortOrder?: number;

    /**
     * true if has parents
     */
    hasParent?: boolean;

    /**
     * true if has children
     */
    hasChildren?: boolean;

    latestRedListStatusFinland?: any;

}
